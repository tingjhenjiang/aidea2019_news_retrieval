from transformers import (
    BertTokenizerFast,
)
import os,re,copy,sys
import pandas as pd
import tensorflow as tf
import numpy as np
import news_retrieval_common_funcs
import multiprocessing_functions
from sklearn.model_selection import train_test_split
from sklearn.utils import resample as sklearnResample
from sklearn.utils import class_weight
import condor_tensorflow as condor
import multiprocessing
import dask, dask.bag
from IPython.display import display, HTML

class getdata:
    def __init__(self, **settings):
        settings.setdefault('workingdir', os.getcwd())
        settings.setdefault('ckipModelName', 'ckiplab/albert-tiny-chinese')
        settings.setdefault('num_workers', multiprocessing.cpu_count())
        settings.setdefault('tokenizerSettingsDoc', {
            'padding':'max_length',
            'truncation':True,
            'return_tensors':"np"
        })
        settings.setdefault('tokenizerSettingsQuery', {
            'padding':'max_length',
            'truncation':True,
            'return_tensors':"np"
        })
        settings.setdefault('batch_size', 32)
        settings.setdefault('random_state', 1)
        settings.setdefault('test_size', 0.15)
        settings.setdefault('querySynonyms',{ #支持同意贊成應該是應該的是合理的 被接受 被支持 是正確的 #不支持反對不贊成不同意不應該不應該的不合理的 是不對的 支持取消 禁止 允許 拒絕
            '反對二代健保規定':['支持維持二代健保現有規定是不應該的','同意維持二代健保現有規定是不應該的','贊成維持二代健保現有規定是不應該的',
                '同意維持二代健保規定是不合理的','維持二代健保規定是不對的','允許二代健保規定是不合理的','允許二代健保規定是不正確的','允許二代健保規定是錯誤的',
                '不應該允許二代健保規定','不支持二代健保規定','不贊成二代健保規定','不同意二代健保規定','拒絕二代健保規定是正確的','不應該維持二代健保現有規定','拒絕二代健保規定是合理的',
                '應該拒絕二代健保規定'],
            '臺灣應開放含瘦肉精(萊克多巴胺)之美國牛肉進口':['支持臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口','同意臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口',
                '贊成臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口','臺灣應該開放含瘦肉精(萊克多巴胺)之美國牛肉進口','臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口是應該的',
                '臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口應該被接受','臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口應該被支持','臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口是正確的',
                '不支持禁止臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口','反對禁止臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口','不贊成禁止臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口',
                '不同意禁止臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口','不應該禁止臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口','禁止臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口是不應該的',
                '禁止臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口是不合理的','禁止臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口是不對的','禁止臺灣開放含瘦肉精(萊克多巴胺)之美國牛肉進口是錯誤的'],
            '國際賽事會場內應該可以持中華民國國旗':['支持國際賽事會場內可以持中華民國國旗','同意國際賽事會場內可以持中華民國國旗','贊成國際賽事會場內可以持中華民國國旗',
                '國際賽事會場內可以持中華民國國旗是應該的','國際賽事會場內可以持中華民國國旗是合理的','國際賽事會場內可以持中華民國國旗應該被接受',
                '國際賽事會場內可以持中華民國國旗應該被支持','國際賽事會場內可以持中華民國國旗是正確的','不支持禁止國際賽事會場內持中華民國國旗',
                '反對禁止國際賽事會場內持中華民國國旗','不贊成禁止國際賽事會場內持中華民國國旗','不同意禁止國際賽事會場內持中華民國國旗',
                '禁止國際賽事會場內持中華民國國旗是不應該的','不應該禁止國際賽事會場內持中華民國國旗','禁止國際賽事會場內持中華民國國旗是不合理的'],
            '反對無圍牆校園':[
                '支持有圍牆限制校園進出','同意有圍牆限制校園進出','贊成有圍牆限制校園進出','應該有圍牆限制校園進出','有圍牆限制校園進出是應該的',
                '有圍牆限制校園進出是合理的','有圍牆限制校園進出是被接受的','有圍牆限制校園進出是應該被支持的','有圍牆限制校園進出是正確的',
                '支持校園設圍牆','同意校園設圍牆','贊成校園設圍牆','校園應該設圍牆','校園設圍牆是應該的','校園設圍牆是合理的','校園設圍牆是可被接受的','校園設圍牆是可被支持的','校園設圍牆是正確的',
                '不支持無圍牆校園','不贊成無圍牆校園','不同意無圍牆校園','校園不應該無圍牆','校園無圍牆是不應該的','校園無圍牆是不合理的',
                '校園不應該取消圍牆','校園取消圍牆是不應該的','校園取消圍牆是不合理的','校園取消圍牆是不對的',
                '不應該拒絕校園設圍牆','拒絕校園設圍牆是不應該的','拒絕校園設圍牆是不合理的','拒絕校園設圍牆是不對的',],
            '另立專法保障同婚是正確的':['支持另立專法保障同婚','同意另立專法保障同婚','贊成另立專法保障同婚','應該另立專法保障同婚',
                '另立專法保障同婚是應該的','另立專法保障同婚是合理的','另立專法保障同婚應該被接受','另立專法保障同婚應該被支持',
                '不支持取消另立專法保障同婚','反對取消另立專法保障同婚','不贊成取消另立專法保障同婚','不同意取消另立專法保障同婚'
                '不應該取消另立專法保障同婚','取消另立專法保障同婚是不應該的','取消另立專法保障同婚是不合理的'],
            '堅決反對政府舉債發展前瞻建設計畫':['支持禁止政府舉債發展前瞻建設計畫','同意禁止政府舉債發展前瞻建設計畫','贊成禁止政府舉債發展前瞻建設計畫'
                '應該禁止政府舉債發展前瞻建設計畫','禁止政府舉債發展前瞻建設計畫是應該的','禁止政府舉債發展前瞻建設計畫是合理的','禁止政府舉債發展前瞻建設計畫應該被接受'
                '禁止政府舉債發展前瞻建設計畫應該被支持','不支持政府舉債發展前瞻建設計畫','反對政府舉債發展前瞻建設計畫','不贊成政府舉債發展前瞻建設計畫',
                '不同意政府舉債發展前瞻建設計畫','政府不應該舉債發展前瞻建設計畫','政府舉債發展前瞻建設計畫是不應該的','政府舉債發展前瞻建設計畫是不合理的'],
            '支持陳前總統保外就醫':['同意陳前總統保外就醫','贊成陳前總統保外就醫','陳前總統應該可以保外就醫','應該允許陳前總統保外就醫','允許陳前總統保外就醫是應該的',
                '陳前總統保外就醫是合理的','不支持禁止陳前總統保外就醫','反對禁止陳前總統保外就醫','不贊成禁止陳前總統保外就醫','不同意禁止陳前總統保外就醫',
                '不應該禁止陳前總統保外就醫','禁止陳前總統保外就醫是不應該的','拒絕陳前總統保外就醫是不合理的'],
            '年金改革應取消或應調降軍公教月退之優存利率十八趴':['支持年金改革取消或調降軍公教月退之優存利率十八趴','同意年金改革取消或調降軍公教月退之優存利率十八趴',
                '贊成年金改革取消或調降軍公教月退之優存利率十八趴','年金改革取消或調降軍公教月退之優存利率十八趴是應該的','年金改革取消或調降軍公教月退之優存利率十八趴是合理的',
                '不支持年金改革或調升軍公教月退之優存利率十八趴','反對年金改革或調升軍公教月退之優存利率十八趴','不贊成年金改革或調升軍公教月退之優存利率十八趴',
                '不同意年金改革或調升軍公教月退之優存利率十八趴','不應該年金改革或調升軍公教月退之優存利率十八趴','年金改革或調升軍公教月退之優存利率十八趴是不應該的',
                '年金改革或調升軍公教月退之優存利率十八趴是不合理的'],
            '同意動物實驗':['支持動物實驗','贊成動物實驗','應該接受動物實驗','接受動物實驗是應該的','接受動物實驗是合理的',
                '不支持禁止動物實驗','反對禁止動物實驗','不贊成禁止動物實驗','不同意禁止動物實驗','不應該禁止動物實驗',
                '禁止動物實驗是不應該的','禁止動物實驗是不合理的','動物實驗不應該被取消','動物實驗不應該被禁止',
                '動物實驗應該可以被接受','動物實驗應該被支持'],
            '油價應該凍漲或緩漲':['支持油價凍漲或緩漲','同意油價凍漲或緩漲','贊成油價凍漲或緩漲','油價凍漲或緩漲是應該的','油價凍漲或緩漲是合理的',
                '油價凍漲或緩漲應該被接受','油價凍漲或緩漲應該被支持','不支持油價漲價或調漲','反對油價漲價或調漲','不贊成油價漲價或調漲',
                '不同意油價漲價或調漲','油價不應該漲價或調漲','油價漲價或調漲是不應該的','油價漲價或調漲是不合理的','支持禁止油價漲價或調漲',
                '同意禁止油價漲價或調漲','贊成禁止油價漲價或調漲','應該禁止油價漲價或調漲','禁止油價漲價或調漲是應該的','禁止油價漲價或調漲是合理的',
                '禁止油價漲價或調漲應該被接受','禁止油價漲價或調漲應該被支持'],
            '反對旺旺中時併購中嘉':['支持禁止旺旺中時併購中嘉','同意禁止旺旺中時併購中嘉','贊成禁止旺旺中時併購中嘉','應該禁止旺旺中時併購中嘉',
                '禁止旺旺中時併購中嘉是應該的','禁止旺旺中時併購中嘉是合理的','禁止旺旺中時併購中嘉應該被接受','禁止旺旺中時併購中嘉應該被支持',
                '不支持允許旺旺中時併購中嘉','反對允許旺旺中時併購中嘉','不贊成允許旺旺中時併購中嘉','不同意允許旺旺中時併購中嘉','不應該允許旺旺中時併購中嘉',
                '允許旺旺中時併購中嘉是不應該的','允許旺旺中時併購中嘉是不合理的','反對媒體壟斷'],
            '贊同課綱微調':['支持課綱微調','同意課綱微調','贊成課綱微調','課綱應該微調','課綱微調是應該的','課綱微調是合理的','課綱微調應該被接受',
                '課綱微調應該被支持','課綱微調是正確的','應允許課綱微調','不支持取消課綱微調','反對取消課綱微調','不贊成取消課綱微調','不同意取消課綱微調','不應該取消課綱微調',
                '取消課綱微調是不應該的','取消課綱微調是不合理的'],
            '贊成流浪動物零撲殺':['支持流浪動物零撲殺','同意流浪動物零撲殺','流浪動物應該零撲殺','流浪動物零撲殺是應該的','流浪動物零撲殺是合理的',
                '流浪動物零撲殺是正確的','不支持撲殺流浪動物','反對撲殺流浪動物','不贊成撲殺流浪動物','不同意撲殺流浪動物','不應該撲殺流浪動物','撲殺流浪動物是不應該的',
                '撲殺流浪動物是不合理的','支持禁止撲殺流浪動物','同意禁止撲殺流浪動物','贊成禁止撲殺流浪動物','應該禁止撲殺流浪動物','禁止撲殺流浪動物是應該的',
                '禁止撲殺流浪動物是合理的','禁止撲殺流浪動物應該被接受','禁止撲殺流浪動物應該被支持','禁止撲殺流浪動物是正確的'],
            '核四應該啟用':['支持啟用核四','同意啟用核四','贊成啟用核四','啟用核四是應該的','啟用核四是合理的','啟用核四應該被接受','啟用核四應該被支持','啟用核四是正確的',
                '不支持停用或封存核四','反對停用或封存核四','不贊成停用或封存核四','不同意停用或封存核四','不應該停用或封存核四','停用或封存核四是不應該的',
                '停用或封存核四是不合理的','支持允許啟用核四','同意允許啟用核四','贊成允許啟用核四','應該允許啟用核四','允許啟用核四是應該的','允許啟用核四是正確的'
                '支持核四應該啟用','不拒絕核四應該啟用','同意核四應該啟用','贊成核四應該啟用',
                '核四啟用是應該的','核四啟用是合理的','核四啟用是可被接受的','核四啟用是可被支持的','核四啟用是正確的','核四啟用是對的',
                '支持允許核四啟用','不拒絕允許核四啟用','同意允許核四啟用','贊成允許核四啟用',
                '允許核四啟用是應該的','允許核四啟用是合理的','允許核四啟用是可被接受的','允許核四啟用是可被支持的','允許核四啟用是正確的','允許核四啟用是對的',
                ],
            '贊成文林苑都更案可依法拆除王家':['支持文林苑都更案可依法拆除王家','同意文林苑都更案可依法拆除王家','文林苑都更案應該依法拆除王家','文林苑都更案依法拆除王家是應該的',
                '文林苑都更案依法拆除王家是合理的','文林苑都更案依法拆除王家應該被接受','文林苑都更案依法拆除王家應該被支持','文林苑都更案依法拆除王家是正確的',
                '不支持文林苑都更案不依法拆除王家','反對文林苑都更案不依法拆除王家','不贊成文林苑都更案不依法拆除王家','不同意文林苑都更案不依法拆除王家',
                '不應該文林苑都更案不依法拆除王家','文林苑都更案不依法拆除王家是不應該的','文林苑都更案不依法拆除王家是不合理的'],
            '十二年國教高中職「免學費補助」適用對象增加是不對的':['支持限制十二年國教高中職免學費補助適用對象增加','同意限制十二年國教高中職免學費補助適用對象增加',
                '贊成限制十二年國教高中職免學費補助適用對象增加','應該限制十二年國教高中職免學費補助適用對象增加','限制十二年國教高中職免學費補助適用對象增加是應該的',
                '限制十二年國教高中職免學費補助適用對象增加是合理的','限制十二年國教高中職免學費補助適用對象增加應該被接受','限制十二年國教高中職免學費補助適用對象增加應該被支持',
                '限制十二年國教高中職免學費補助適用對象增加是正確的','不支持十二年國教高中職免學費補助適用對象增加','反對十二年國教高中職免學費補助適用對象增加',
                '不贊成十二年國教高中職免學費補助適用對象增加','不同意十二年國教高中職免學費補助適用對象增加','十二年國教高中職免學費補助適用對象不應該增加',
                '十二年國教高中職免學費補助適用對象增加是不應該的','十二年國教高中職免學費補助適用對象增加是不合理的','不應該允許十二年國教高中職免學費補助適用對象增加',
                '允許十二年國教高中職免學費補助適用對象增加是不合理的','允許十二年國教高中職免學費補助適用對象增加是不對的'],
            '遠雄大巨蛋工程應停工或拆除':['支持遠雄大巨蛋工程停工或拆除','同意遠雄大巨蛋工程停工或拆除','贊成遠雄大巨蛋工程停工或拆除','遠雄大巨蛋工程應該停工或拆除',
                '遠雄大巨蛋工程停工或拆除是應該的','遠雄大巨蛋工程停工或拆除是合理的','遠雄大巨蛋工程停工或拆除應該被接受','遠雄大巨蛋工程停工或拆除應該被支持',
                '遠雄大巨蛋工程停工或拆除是正確的','不支持遠雄大巨蛋工程繼續興建','反對遠雄大巨蛋工程繼續興建','不贊成遠雄大巨蛋工程繼續興建','不同意遠雄大巨蛋工程繼續興建',
                '遠雄大巨蛋工程不應該繼續興建','遠雄大巨蛋工程繼續興建是不應該的','遠雄大巨蛋工程繼續興建是不合理的','遠雄大巨蛋工程繼續興建是不對的',
                '支持禁止遠雄大巨蛋工程繼續興建','同意禁止遠雄大巨蛋工程繼續興建','贊成禁止遠雄大巨蛋工程繼續興建','應該禁止遠雄大巨蛋工程繼續興建','禁止遠雄大巨蛋工程繼續興建是應該的',
                '禁止遠雄大巨蛋工程繼續興建是合理的','禁止遠雄大巨蛋工程繼續興建應該被接受','禁止遠雄大巨蛋工程繼續興建應該被支持','禁止遠雄大巨蛋工程繼續興建是正確的'],
            '支持正名「臺灣」參與國際運動賽事':['同意正名臺灣參與國際運動賽事','贊成正名臺灣參與國際運動賽事','應該正名臺灣參與國際運動賽事',
                '正名臺灣參與國際運動賽事是應該的','正名臺灣參與國際運動賽事是合理的','正名臺灣參與國際運動賽事應該被接受','正名臺灣參與國際運動賽事應該被支持',
                '正名臺灣參與國際運動賽事是正確的','不支持不正名臺灣參與國際運動賽事','反對不正名臺灣參與國際運動賽事','不贊成不正名臺灣參與國際運動賽事',
                '不同意不正名臺灣參與國際運動賽事','不應該不正名臺灣參與國際運動賽事','不正名臺灣參與國際運動賽事是不應該的','不正名臺灣參與國際運動賽事是不合理的'],
            '拒絕公投通過門檻下修':['支持公投通過門檻不下修','同意公投通過門檻不下修','贊成公投通過門檻不下修','公投通過門檻應該不下修','公投通過門檻不下修是應該的',
                '公投通過門檻不下修是合理的','公投通過門檻不下修應該被接受','公投通過門檻不下修應該被支持','公投通過門檻不下修是正確的','不支持公投通過門檻下修',
                '反段公投通過門檻下修','不贊成公投通過門檻下修','不同意公投通過門檻下修','公投通過門檻不應該下修','公投通過門檻下修是不應該的','公投通過門檻下修是不合理的',
                '支持禁止公投通過門檻下修','同意禁止公投通過門檻下修','贊成禁止公投通過門檻下修','應該禁止公投通過門檻下修','禁止公投通過門檻下修是應該的','禁止公投通過門檻下修是合理的',
                '禁止公投通過門檻下修應該被接受','禁止公投通過門檻下修應該被支持','禁止公投通過門檻下修是正確的'],
            '應該提高酒駕罰責以有效遏制酒駕':['支持提高酒駕罰責以有效遏制酒駕','同意提高酒駕罰責以有效遏制酒駕','贊成提高酒駕罰責以有效遏制酒駕',
                '提高酒駕罰責以有效遏制酒駕是應該的','提高酒駕罰責以有效遏制酒駕是合理的','提高酒駕罰責以有效遏制酒駕應該被接受','提高酒駕罰責以有效遏制酒駕應該被支持',
                '提高酒駕罰責以有效遏制酒駕是正確的','不支持降低或維持酒駕罰責','反對降低或維持酒駕罰責','不贊成降低或維持酒駕罰責','不同意降低或維持酒駕罰責',
                '不應該降低或維持酒駕罰責','降低或維持酒駕罰責是不應該的','降低或維持酒駕罰責是不合理的','降低或維持酒駕罰責是不對的'],

            """
            NOT in training data
            """
            'ECFA早收清單可（有）達到其預期成效':['ECFA早收清單有效','ECFA早收清單成效良好','ECFA早收清單成效達標','ECFA早收清單沒有失效'],
            '不支持使用加密貨幣':['支持限制使用加密貨幣','同意限制使用加密貨幣','贊成限制使用加密貨幣','應該限制使用加密貨幣',
                '限制使用加密貨幣是應該的','限制使用加密貨幣是合理的','反對使用加密貨幣','不贊成使用加密貨幣','不同意使用加密貨幣',
                '不應該使用加密貨幣','使用加密貨幣是不應該的','使用加密貨幣是不合理的','支持限制使用加密貨幣','同意限制使用加密貨幣',
                '贊成限制使用加密貨幣','應該限制使用加密貨幣','限制使用加密貨幣是應該的'],
            '不支持學雜費調漲':['支持限制學雜費調漲','同意限制學雜費調漲','贊成限制學雜費調漲','限制學雜費調漲是應該的','應該限制學雜費調漲',
                '限制學雜費調漲是合理的','反對學雜費調漲','不贊成學雜費調漲','不同意學雜費調漲','學雜費不應該調漲','學雜費調漲是不應該的',
                '學雜費調漲是不合理的','支持禁止學雜費調漲','同意禁止學雜費調漲','贊成禁止學雜費調漲','禁止學雜費調漲是應該的','應該禁止學雜費調漲',
                '禁止學雜費調漲是合理的'],
            '中華航空空服員罷工是合理的':['支持中華航空空服員罷工','同意中華航空空服員罷工','贊成中華航空空服員罷工','中華航空空服員應該可以罷工',
                '中華航空空服員罷工是應該的','不支持禁止中華航空空服員罷工','反對禁止中華航空空服員罷工','不贊成禁止中華航空空服員罷工',
                '不同意禁止中華航空空服員罷工','不應該禁止中華航空空服員罷工','禁止中華航空空服員罷工是不合理的','中華航空空服員罷工不應該譴責','不應該否定華航空服員罷工'],
            '反對台鐵東移徵收案':['支持取消台鐵東移徵收案','同意取消台鐵東移徵收案','贊成取消台鐵東移徵收案','應該取消台鐵東移徵收案','取消台鐵東移徵收案是應該的',
                '取消台鐵東移徵收案是合理的','不支持台鐵東移徵收案','不贊成台鐵東移徵收案','不同意台鐵東移徵收案','不應該台鐵東移徵收','台鐵東移徵收是不應該的',
                '台鐵東移徵收是不合理的'],
            '同意政府舉債發展前瞻建設計畫':['支持政府舉債發展前瞻建設計畫','贊成政府舉債發展前瞻建設計畫','政府應該舉債發展前瞻建設計畫','政府舉債發展前瞻建設計畫是應該的',
                '政府舉債發展前瞻建設計畫是合理的','不支持禁止政府舉債發展前瞻建設計畫','反對禁止政府舉債發展前瞻建設計畫','不贊成禁止政府舉債發展前瞻建設計畫',
                '不同意禁止政府舉債發展前瞻建設計畫','不應該禁止政府舉債發展前瞻建設計畫','禁止政府舉債發展前瞻建設計畫是不應該的','政府舉債發展前瞻建設計畫是不合理的'],
            '性交易應該合法化':['支持性交易免罰','同意性交易免罰','贊成性交易免罰','性交易應該免罰','性交易免罰是應該的',
                '性交易免罰是合理的','支持取消性交易限制','同意取消性交易限制','贊成取消性交易限制','應該取消性交易限制',
                '取消性交易限制是應該的','取消性交易限制是合理的','性交易應該被接受','不支持禁止性交易','反對禁止性交易',
                '不贊成禁止性交易','不同意禁止性交易','不應該禁止性交易','禁止性交易是不應該的','禁止性交易是不合理的',
                '性交易不應該處罰','性交易不應該被禁止'],
            '應該取消機車強制二段式左轉(待轉)':['支持機車可以直接轉彎','支持取消強制機車二段式左轉','同意取消強制機車二段式左轉',
                '贊成取消強制機車二段式左轉','機車應該可以直接轉彎而不需要二段式左轉','不支持機車強制二段式左轉(待轉)',
                '反段機車強制二段式左轉(待轉)','不贊成機車強制二段式左轉(待轉)','不同意機車強制二段式左轉(待轉)',
                '不應該強制機車二段式左轉(待轉)','機車強制二段式左轉(待轉)是不合理的','機車不應該被強制二段式左轉(待轉)',
                ],
            '應該減免證所稅':['支持減免證所稅','同意減免證所稅','贊成減免證所稅','減免證所稅是應該的','減免證所稅是合理的','應該減少課徵證所稅',
                '應該減少課徵證券交易所得稅','應該減少證券交易所得稅的課徵','應該減少或免除證所稅','應該減少或免除證券交易所得稅',
                '支持減少或免除證券交易所得稅','不支持增加證所稅','反對增加證所稅','不贊成增加證所稅','不同意增加證所稅','或應該增加證所稅',
                '增加證所稅是不應該的','增加證所稅是不合理的'],
            '支持中國學生納入健保':['同意中國學生納入健保','贊成中國學生納入健保','支持中國學生可以有健保','同意中國學生可以有健保',
                '贊成中國學生可以有健保','支持健保納入中國學生','同意健保納入中國學生','贊成健保納入中國學生','中國學生應該納入健保',
                '中國學生納入健保是應該的','中國學生納入健保是合理的','不支持禁止中國學生納入健保','反對禁止中國學生納入健保','不贊成禁止中國學生納入健保',
                '不同意禁止中國學生納入健保','禁止中國學生納入健保是不應該的','不應該禁止中國學生納入健保','禁止中國學生納入健保是不合理的',
                '支持取消中國學生納入健保的限制','同意取消中國學生納入健保的限制','贊成取消中國學生納入健保的限制','取消中國學生納入健保的甚至是合理的',
                '應該取消中國學生納入健保的限制','取消中國學生納入勞健保的限制是合理的'],
            '支持博弈特區在台灣合法化':['同意博弈特區在台灣合法化','贊成博弈特區在台灣合法化','博弈特區應該在台灣合法化',
                '支持在台灣設立博弈特區','台灣應該設立博弈特區','同意台灣設立博弈特區',
                '博弈特區在台灣合法化是合理的','不支持在台灣禁止博弈特區合法化','反對在台灣禁止博弈特區','不贊成在台灣禁止博弈特區',
                '不同意在台灣禁止博弈特區','在台灣禁止博弈特區是不應該的','在台灣禁止博弈特區是不合理的','在台灣不應該處罰博弈特區內的博弈',
                '在台灣的博弈特區內不應該處罰博弈行為'],
            '支持臺灣中小學（含高職、專科）服儀規定（含髮、襪、鞋）給予學生自主':['支持廢除中小學生服儀規定','中小學生服儀規定應該廢除',
                '同意中小學生服儀規定尊重自主或放寬','贊成廢除或放寬中小學生服儀規定','支持廢除中小學生髮禁','同意廢除中小學生髮禁',
                '贊成廢除中小學生髮禁','贊成中小學生服儀規定尊重自主或放寬','中小學生服儀規定應該尊重自主或放寬','中小學生服儀規定尊重自主或放寬是應該的',
                '中小學生服儀規定尊重自主或放寬是合理的','不支持中小學生服儀限制','反對中小學生服儀限制','不贊成中小學生服儀限制','不同意中小學生服儀限制',
                '不應該限制中小學生服儀','中小學生服儀限制是不應該的','中小學生服儀限制是不合理的'],
            '支持電競列入體育競技':['同意電競列入體育競技','贊成電競列入體育競技','應該將電競列入體育競技','電競列入體育競技是應該的','電競列入體育競技是合理的',
                '不支持禁止電競列入體育競技','反對禁止電競列入體育競技','不贊成禁止電競列入體育競技','不同意禁止電競列入體育競技','不應該禁止電競列入體育競技',
                '禁止電競列入體育競技是不應該的','禁止電競列入體育競技是不合理的'],
            '贊成中油在觀塘興建第三天然氣接收站':['支持中油在觀塘興建第三天然氣接收站','同意中油在觀塘興建第三天然氣接收站','中油在觀塘興建第三天然氣接收站是應該的',
                '中油應該在觀塘興建第三天然氣接收站','中油在觀塘興建第三天然氣接收站是合理的','不支持中油在觀塘取消興建第三天然氣接收站','反對中油取消在觀塘興建第三天然氣接收站',
                '不贊成中油在觀塘取消興建第三天然氣接收站','不同意中油在觀塘取消興建第三天然氣接收站','中油不應該在觀塘取消興建第三天然氣接收站',
                '中油取消在觀塘興建第三天然氣接收站是不應該的','中油取消在觀塘興建第三天然氣接收站是不合理的'],
            '通姦在刑法上應該除罪化':['支持通姦除罪化','同意通姦除罪化','贊成通姦除罪化','通姦應該除罪化','通姦除罪化是合理的',
                '通姦應該刑事免責','通姦應該無罪','通姦應該免刑','通姦應該刑事免刑','通姦應該免罰刑','通姦應該免刑',
                '不應該以刑罰處罰通姦','不應該以刑法處罰通姦','通姦不應該被判刑','通姦不應該有罪','拒絕通姦在刑法上除罪化是不合理的'],
        })
        settings.setdefault('queryAntonyms',{ #支持不拒絕同意贊成應該是應該的是合理的 被接受 被支持 是正確的 是對的 允許 #不支持反對不贊成不同意不應該不應該的不合理的 是不對的 是不正確的 是錯誤的 支持取消 禁止 停止 允許 拒絕

            '應該提高酒駕罰責以有效遏制酒駕':['不支持提高酒駕罰責以有效遏制酒駕','反對提高酒駕罰責以有效遏制酒駕','不贊成提高酒駕罰責以有效遏制酒駕','不同意提高酒駕罰責以有效遏制酒駕','不應該提高酒駕罰責以有效遏制酒駕',
                '提高酒駕罰責以有效遏制酒駕是不應該的','提高酒駕罰責以有效遏制酒駕是不合理的','提高酒駕罰責以有效遏制酒駕是不對的','提高酒駕罰責以有效遏制酒駕是不正確的','提高酒駕罰責以有效遏制酒駕是錯誤的',
                '支持取消提高酒駕罰責以有效遏制酒駕','不拒絕取消提高酒駕罰責以有效遏制酒駕','贊成取消提高酒駕罰責以有效遏制酒駕','同意取消提高酒駕罰責以有效遏制酒駕','應該取消提高酒駕罰責以有效遏制酒駕',
                '取消提高酒駕罰責以有效遏制酒駕是應該的','取消提高酒駕罰責以有效遏制酒駕是合理的','取消提高酒駕罰責以有效遏制酒駕是對的','取消提高酒駕罰責以有效遏制酒駕是正確的',
                '支持禁止提高酒駕罰責以有效遏制酒駕','不拒絕禁止提高酒駕罰責以有效遏制酒駕','贊成禁止提高酒駕罰責以有效遏制酒駕','同意禁止提高酒駕罰責以有效遏制酒駕','應該禁止提高酒駕罰責以有效遏制酒駕',
                '禁止提高酒駕罰責以有效遏制酒駕是應該的','禁止提高酒駕罰責以有效遏制酒駕是合理的','禁止提高酒駕罰責以有效遏制酒駕是對的','禁止提高酒駕罰責以有效遏制酒駕是正確的',
                '支持停止提高酒駕罰責以有效遏制酒駕','不拒絕停止提高酒駕罰責以有效遏制酒駕','贊成停止提高酒駕罰責以有效遏制酒駕','同意停止提高酒駕罰責以有效遏制酒駕','應該停止提高酒駕罰責以有效遏制酒駕',
                '停止提高酒駕罰責以有效遏制酒駕是應該的','停止提高酒駕罰責以有效遏制酒駕是合理的','停止提高酒駕罰責以有效遏制酒駕是對的','停止提高酒駕罰責以有效遏制酒駕是正確的',
                '支持拒絕提高酒駕罰責以有效遏制酒駕','不拒絕拒絕提高酒駕罰責以有效遏制酒駕','贊成拒絕提高酒駕罰責以有效遏制酒駕','同意拒絕提高酒駕罰責以有效遏制酒駕','應該拒絕提高酒駕罰責以有效遏制酒駕',
                '拒絕提高酒駕罰責以有效遏制酒駕是應該的','拒絕提高酒駕罰責以有效遏制酒駕是合理的','拒絕提高酒駕罰責以有效遏制酒駕是對的','拒絕提高酒駕罰責以有效遏制酒駕是正確的'
                ],
            '拒絕公投通過門檻下修':['支持公投通過門檻下修','不拒絕公投通過門檻下修','同意公投通過門檻下修','贊成公投通過門檻下修','公投通過門檻應該下修',
                '公投通過門檻下修是應該的','公投通過門檻下修是合理的','公投通過門檻下修是可被接受的','公投通過門檻下修是可被支持的','公投通過門檻下修是正確的','公投通過門檻下修是對的',
                '支持允許公投通過門檻下修','不拒絕允許公投通過門檻下修','同意允許公投通過門檻下修','贊成允許公投通過門檻下修','公投通過門檻應該允許下修',
                '允許公投通過門檻下修是應該的','允許公投通過門檻下修是合理的','允許公投通過門檻下修是可被接受的','允許公投通過門檻下修是可被支持的','允許公投通過門檻下修是正確的','允許公投通過門檻下修是對的',
                '不支持取消公投通過門檻下修','反對取消公投通過門檻下修','不贊成取消公投通過門檻下修','不同意取消公投通過門檻下修','取消公投通過門檻不應該下修',
                '取消公投通過門檻下修是不應該的','取消公投通過門檻下修是不合理的','取消公投通過門檻下修是不對的','取消公投通過門檻下修是不正確的','取消公投通過門檻下修是錯誤的',
                '不支持禁止公投通過門檻下修','反對禁止公投通過門檻下修','不贊成禁止公投通過門檻下修','不同意禁止公投通過門檻下修','禁止公投通過門檻不應該下修',
                '禁止公投通過門檻下修是不應該的','禁止公投通過門檻下修是不合理的','禁止公投通過門檻下修是不對的','禁止公投通過門檻下修是不正確的','禁止公投通過門檻下修是錯誤的',
                '不支持停止公投通過門檻下修','反對停止公投通過門檻下修','不贊成停止公投通過門檻下修','不同意停止公投通過門檻下修','停止公投通過門檻不應該下修',
                '停止公投通過門檻下修是不應該的','停止公投通過門檻下修是不合理的','停止公投通過門檻下修是不對的','停止公投通過門檻下修是不正確的','停止公投通過門檻下修是錯誤的',
                '不支持拒絕公投通過門檻下修','反對拒絕公投通過門檻下修','不贊成拒絕公投通過門檻下修','不同意拒絕公投通過門檻下修','拒絕公投通過門檻不應該下修',
                '拒絕公投通過門檻下修是不應該的','拒絕公投通過門檻下修是不合理的','拒絕公投通過門檻下修是不對的','拒絕公投通過門檻下修是不正確的','拒絕公投通過門檻下修是錯誤的'],
            '支持正名「臺灣」參與國際運動賽事':['不支持正名臺灣參與國際運動賽事','反對正名臺灣參與國際運動賽事','不贊成正名臺灣參與國際運動賽事','不同意正名臺灣參與國際運動賽事','不應該正名臺灣參與國際運動賽事',
                '正名臺灣參與國際運動賽事是不應該的','正名臺灣參與國際運動賽事是不合理的','正名臺灣參與國際運動賽事是不對的','正名臺灣參與國際運動賽事是不正確的','正名臺灣參與國際運動賽事是錯誤的',
                '支持拒絕正名臺灣參與國際運動賽事','同意拒絕正名臺灣參與國際運動賽事','贊成拒絕正名臺灣參與國際運動賽事','應該拒絕正名臺灣參與國際運動賽事',
                '拒絕正名臺灣參與國際運動賽事是應該的','拒絕正名臺灣參與國際運動賽事是合理的','拒絕正名臺灣參與國際運動賽事是對的','拒絕正名臺灣參與國際運動賽事是正確的',
                '支持取消正名臺灣參與國際運動賽事','同意取消正名臺灣參與國際運動賽事','贊成取消正名臺灣參與國際運動賽事','應該取消正名臺灣參與國際運動賽事',
                '取消正名臺灣參與國際運動賽事是應該的','取消正名臺灣參與國際運動賽事是合理的','取消正名臺灣參與國際運動賽事是對的','取消正名臺灣參與國際運動賽事是正確的',
                '支持禁止正名臺灣參與國際運動賽事','同意禁止正名臺灣參與國際運動賽事','贊成禁止正名臺灣參與國際運動賽事','應該禁止正名臺灣參與國際運動賽事',
                '禁止正名臺灣參與國際運動賽事是應該的','禁止正名臺灣參與國際運動賽事是合理的','禁止正名臺灣參與國際運動賽事是對的','禁止正名臺灣參與國際運動賽事是正確的',
                '支持停止正名臺灣參與國際運動賽事','同意停止正名臺灣參與國際運動賽事','贊成停止正名臺灣參與國際運動賽事','應該停止正名臺灣參與國際運動賽事',
                '停止正名臺灣參與國際運動賽事是應該的','停止正名臺灣參與國際運動賽事是合理的','停止正名臺灣參與國際運動賽事是對的','停止正名臺灣參與國際運動賽事是正確的'
                ],
            '遠雄大巨蛋工程應停工或拆除':['不支持遠雄大巨蛋工程停工或拆除','反對遠雄大巨蛋工程停工或拆除','不贊成遠雄大巨蛋工程停工或拆除','不同意遠雄大巨蛋工程停工或拆除','遠雄大巨蛋工程不應該停工或拆除',
                '遠雄大巨蛋工程停工或拆除是不應該的','遠雄大巨蛋工程停工或拆除是不合理的','遠雄大巨蛋工程停工或拆除是不正確的','遠雄大巨蛋工程停工或拆除是錯誤的','遠雄大巨蛋工程停工或拆除是不對的',
                '支持禁止遠雄大巨蛋工程停工或拆除','不拒絕禁止遠雄大巨蛋工程停工或拆除','同意禁止遠雄大巨蛋工程停工或拆除','贊成禁止遠雄大巨蛋工程停工或拆除','應該禁止遠雄大巨蛋工程停工或拆除',
                '禁止遠雄大巨蛋工程停工或拆除是應該的','禁止遠雄大巨蛋工程停工或拆除是合理的','禁止遠雄大巨蛋工程停工或拆除是正確的','遠雄大巨蛋工程停工或拆除是對的',
                '支持拒絕遠雄大巨蛋工程停工或拆除','不拒絕拒絕遠雄大巨蛋工程停工或拆除','同意拒絕遠雄大巨蛋工程停工或拆除','贊成拒絕遠雄大巨蛋工程停工或拆除','應該拒絕遠雄大巨蛋工程停工或拆除',
                '拒絕遠雄大巨蛋工程停工或拆除是應該的','拒絕遠雄大巨蛋工程停工或拆除是合理的','拒絕遠雄大巨蛋工程停工或拆除是正確的','遠雄大巨蛋工程停工或拆除是對的',
                '支持遠雄大巨蛋工程繼續施工','不拒絕遠雄大巨蛋工程繼續施工','同意遠雄大巨蛋工程繼續施工','贊成遠雄大巨蛋工程繼續施工','遠雄大巨蛋工程應該繼續施工',
                '遠雄大巨蛋工程繼續施工是應該的','遠雄大巨蛋工程繼續施工是合理的','遠雄大巨蛋工程繼續施工是可被接受的','遠雄大巨蛋工程繼續施工是可被支持的','遠雄大巨蛋工程繼續施工是正確的','遠雄大巨蛋工程繼續施工是對的',
                '支持允許遠雄大巨蛋工程繼續施工','不拒絕允許遠雄大巨蛋工程繼續施工','同意允許遠雄大巨蛋工程繼續施工','贊成允許遠雄大巨蛋工程繼續施工','應該允許遠雄大巨蛋工程繼續施工',
                '允許遠雄大巨蛋工程繼續施工是應該的','允許遠雄大巨蛋工程繼續施工是合理的','允許遠雄大巨蛋工程繼續施工是可被接受的','允許遠雄大巨蛋工程繼續施工是可被支持的','允許遠雄大巨蛋工程繼續施工是正確的','允許遠雄大巨蛋工程繼續施工是對的'
                ],
            '十二年國教高中職「免學費補助」適用對象增加是不對的':['支持十二年國教高中職免學費補助適用對象增加','不拒絕十二年國教高中職免學費補助適用對象增加','同意十二年國教高中職免學費補助適用對象增加','贊成十二年國教高中職免學費補助適用對象增加','十二年國教高中職免學費補助適用對象應該增加',
                '十二年國教高中職免學費補助適用對象增加是應該的','十二年國教高中職免學費補助適用對象增加是合理的','十二年國教高中職免學費補助適用對象增加是可被接受的','十二年國教高中職免學費補助適用對象增加是可被支持的','十二年國教高中職免學費補助適用對象增加是正確的','十二年國教高中職免學費補助適用對象增加是對的',
                '支持允許十二年國教高中職免學費補助適用對象增加','不拒絕允許十二年國教高中職免學費補助適用對象增加','同意允許十二年國教高中職免學費補助適用對象增加','贊成允許十二年國教高中職免學費補助適用對象增加','允許十二年國教高中職免學費補助適用對象應該增加',
                '允許十二年國教高中職免學費補助適用對象增加是應該的','允許十二年國教高中職免學費補助適用對象增加是合理的','允許十二年國教高中職免學費補助適用對象增加是可被接受的','允許十二年國教高中職免學費補助適用對象增加是可被支持的','允許十二年國教高中職免學費補助適用對象增加是正確的','允許十二年國教高中職免學費補助適用對象增加是對的',
                '不支持停止十二年國教高中職免學費補助適用對象增加','不拒絕停止十二年國教高中職免學費補助適用對象增加','不同意停止十二年國教高中職免學費補助適用對象增加','不贊成停止十二年國教高中職免學費補助適用對象增加','不應該停止十二年國教高中職免學費補助適用對象增加',
                '停止十二年國教高中職免學費補助適用對象增加是不應該的','停止十二年國教高中職免學費補助適用對象增加是不合理的','停止十二年國教高中職免學費補助適用對象增加是不對的','停止十二年國教高中職免學費補助適用對象增加是不正確的','停止十二年國教高中職免學費補助適用對象增加是錯誤的',
                '不支持取消十二年國教高中職免學費補助適用對象增加','不拒絕取消十二年國教高中職免學費補助適用對象增加','不同意取消十二年國教高中職免學費補助適用對象增加','不贊成取消十二年國教高中職免學費補助適用對象增加','不應該取消十二年國教高中職免學費補助適用對象增加',
                '取消十二年國教高中職免學費補助適用對象增加是不應該的','取消十二年國教高中職免學費補助適用對象增加是不合理的','取消十二年國教高中職免學費補助適用對象增加是不對的','取消十二年國教高中職免學費補助適用對象增加是不正確的','取消十二年國教高中職免學費補助適用對象增加是錯誤的',
                '不支持禁止十二年國教高中職免學費補助適用對象增加','不拒絕禁止十二年國教高中職免學費補助適用對象增加','不同意禁止十二年國教高中職免學費補助適用對象增加','不贊成禁止十二年國教高中職免學費補助適用對象增加','不應該禁止十二年國教高中職免學費補助適用對象增加',
                '禁止十二年國教高中職免學費補助適用對象增加是不應該的','禁止十二年國教高中職免學費補助適用對象增加是不合理的','禁止十二年國教高中職免學費補助適用對象增加是不對的','禁止十二年國教高中職免學費補助適用對象增加是不正確的','禁止十二年國教高中職免學費補助適用對象增加是錯誤的',
                '不支持拒絕十二年國教高中職免學費補助適用對象增加','不拒絕拒絕十二年國教高中職免學費補助適用對象增加','不同意拒絕十二年國教高中職免學費補助適用對象增加','不贊成拒絕十二年國教高中職免學費補助適用對象增加','不應該拒絕十二年國教高中職免學費補助適用對象增加',
                '拒絕十二年國教高中職免學費補助適用對象增加是不應該的','拒絕十二年國教高中職免學費補助適用對象增加是不合理的','拒絕十二年國教高中職免學費補助適用對象增加是不對的','拒絕十二年國教高中職免學費補助適用對象增加是不正確的','拒絕十二年國教高中職免學費補助適用對象增加是錯誤的',
                ],
            '贊成文林苑都更案可依法拆除王家':['不支持文林苑都更案可依法拆除王家','反對文林苑都更案可依法拆除王家','不贊成文林苑都更案可依法拆除王家','不同意文林苑都更案可依法拆除王家','文林苑都更案不應該依法拆除王家',
                '文林苑都更案依法拆除王家是不應該的','文林苑都更案依法拆除王家是不合理的','文林苑都更案依法拆除王家是不對的','文林苑都更案依法拆除王家是不正確的','文林苑都更案依法拆除王家是錯誤的',
                '支持拒絕文林苑都更案依法拆除王家','不反對拒絕文林苑都更案依法拆除王家','贊成拒絕文林苑都更案依法拆除王家','同意拒絕文林苑都更案依法拆除王家','應該拒絕文林苑都更案依法拆除王家',
                '拒絕文林苑都更案依法拆除王家是應該的','拒絕文林苑都更案依法拆除王家是合理的','拒絕文林苑都更案依法拆除王家是對的','拒絕文林苑都更案依法拆除王家是正確的',
                '支持停止文林苑都更案依法拆除王家','不反對停止文林苑都更案依法拆除王家','贊成停止文林苑都更案依法拆除王家','同意停止文林苑都更案依法拆除王家','應該停止文林苑都更案依法拆除王家',
                '停止文林苑都更案依法拆除王家是應該的','停止文林苑都更案依法拆除王家是合理的','停止文林苑都更案依法拆除王家是對的','停止文林苑都更案依法拆除王家是正確的',
                '支持取消文林苑都更案依法拆除王家','不反對取消文林苑都更案依法拆除王家','贊成取消文林苑都更案依法拆除王家','同意取消文林苑都更案依法拆除王家','應該取消文林苑都更案依法拆除王家',
                '取消文林苑都更案依法拆除王家是應該的','取消文林苑都更案依法拆除王家是合理的','取消文林苑都更案依法拆除王家是對的','取消文林苑都更案依法拆除王家是正確的',
                '支持禁止文林苑都更案依法拆除王家','不反對禁止文林苑都更案依法拆除王家','贊成禁止文林苑都更案依法拆除王家','同意禁止文林苑都更案依法拆除王家','應該禁止文林苑都更案依法拆除王家',
                '禁止文林苑都更案依法拆除王家是應該的','禁止文林苑都更案依法拆除王家是合理的','禁止文林苑都更案依法拆除王家是對的','禁止文林苑都更案依法拆除王家是正確的',
                ],
            '反對二代健保規定':['支持二代健保規定','同意二代健保規定','贊成二代健保規定','允許二代健保規定',
                '應該支持二代健保規定','應該同意二代健保規定','應該贊成二代健保規定',
                '支持二代健保規定是應該的','同意二代健保規定是應該的','贊成二代健保規定是應該的',
                '二代健保規定是合理的','支持二代健保規定是合理的','同意二代健保規定是合理的','贊成二代健保規定是合理的','','','',
                '二代健保規定應該被接受','支持二代健保規定應該被接受','同意二代健保規定應該被接受','贊成二代健保規定應該被接受','','','','','',
                '二代健保規定應該被支持','同意二代健保規定應該被支持','贊成二代健保規定應該被支持','','',
                '二代健保規定是正確的','支持二代健保規定是正確的','同意二代健保規定是正確的','贊成二代健保規定是正確的','','','',
                '不應該不支持二代健保規定','應該反對二代健保規定','不應該不贊成二代健保規定','不應該不同意二代健保規定','','','',
                '不支持二代健保規定是不應該的','反對二代健保規定是不應該的','不贊成二代健保規定是不應該的','不同意二代健保規定是不應該的','','','',
                '不支持二代健保規定是不合理的','反對二代健保規定是不合理的','不贊成二代健保規定是不合理的','不同意二代健保規定是不合理的','','','','','','',
                '不支持二代健保規定是不對的','反對二代健保規定是不對的','不贊成二代健保規定是不對的','不同意二代健保規定是不對的',
                ''],
            '臺灣應開放含瘦肉精(萊克多巴胺)之美國牛肉進口':['不支持臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口','反對臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口','不贊成臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口','不同意臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口','臺灣不應該開放含瘦肉精萊克多巴胺的美國牛肉進口',
                '不支持臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是應該的','反對臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是應該的','不贊成臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是應該的','不同意臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是應該的',
                '不支持臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是合理的','反對臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是合理的','不贊成臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是合理的','不同意臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是合理的',
                '支持臺灣禁止開放含瘦肉精萊克多巴胺的美國牛肉進口','同意臺灣禁止開放含瘦肉精萊克多巴胺的美國牛肉進口','贊成臺灣禁止開放含瘦肉精萊克多巴胺的美國牛肉進口','應該禁止臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口',
                '支持臺灣拒絕開放含瘦肉精萊克多巴胺的美國牛肉進口','同意臺灣拒絕開放含瘦肉精萊克多巴胺的美國牛肉進口','贊成臺灣拒絕開放含瘦肉精萊克多巴胺的美國牛肉進口','應該拒絕臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口',
                '不支持臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是可被接受的','反對臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是可被接受的','不贊成臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是可被接受的','不同意臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是可被接受的',
                '不支持臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是可被支持的','反對臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是可被支持的','不贊成臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是可被支持的','不同意臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是可被支持的',
                '不支持臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是正確的','反對臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是正確的','不贊成臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是正確的','不同意臺灣開放含瘦肉精萊克多巴胺的美國牛肉進口是正確的','','','','','','','','','','',
                ],
            '國際賽事會場內應該可以持中華民國國旗':['不支持國際賽事會場內可以持中華民國國旗','反對國際賽事會場內可以持中華民國國旗','不贊成國際賽事會場內可以持中華民國國旗','不同意國際賽事會場內可以持中華民國國旗','國際賽事會場內不應該持中華民國國旗','國際賽事會場內持中華民國國旗是不應該的',
                '國際賽事會場內持中華民國國旗是不合理的','國際賽事會場內持中華民國國旗是不對的',
                '支持禁止國際賽事會場內持中華民國國旗','同意禁止國際賽事會場內持中華民國國旗','贊成禁止國際賽事會場內持中華民國國旗','應該禁止國際賽事會場內持中華民國國旗',
                '禁止國際賽事會場內持中華民國國旗是應該的','禁止國際賽事會場內持中華民國國旗是可被支持的','禁止國際賽事會場內持中華民國國旗是合理的','禁止國際賽事會場內持中華民國國旗是是可被接受的','禁止國際賽事會場內持中華民國國旗是正確的',
                '支持拒絕國際賽事會場內持中華民國國旗','同意拒絕國際賽事內持中華民國國旗','贊成拒絕國際賽事內持中華民國國旗','應該拒絕國際賽事內持中華民國國旗',
                '拒絕國際賽事內持中華民國國旗是應該的','拒絕國際賽事內持中華民國國旗是合理的','拒絕國際賽事內持中華民國國旗是可被接受的','拒絕國際賽事內持中華民國國旗是可被支持的','拒絕國際賽事內持中華民國國旗是正確的',
                ],
            '反對無圍牆校園':[
                '不應該禁止校園設圍牆','禁止校園設圍牆是不應該的','禁止校園設圍牆是不合理的','禁止校園設圍牆是不對的',
                '支持校園取消圍牆','同意校園取消圍牆','贊成校園取消圍牆','校園應該取消圍牆','校園取消圍牆是應該的','校園取消圍牆是可被接受的','校園取消圍牆是可被支持的','校園取消圍牆是合理的','校園取消圍牆是正確的',''
                '支持校園拒絕設圍牆','同意校園拒絕設圍牆','贊成校園拒絕設圍牆','校園應該拒絕設圍牆','校園拒絕設圍牆是應該的','校園拒絕設圍牆是合理的','校園拒絕設圍牆是可被接受的','校園拒絕設圍牆是可被支持的','校園拒絕設圍牆是正確的','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',
                '不支持校園設圍牆是不應該的','反對校園設圍牆是不應該的','不贊成校園設圍牆是不應該的','不同意校園設圍牆是不應該的',
                '不支持校園設圍牆是不合理的','反對校園設圍牆是不合理的','不贊成校園設圍牆是不合理的','不同意校園設圍牆是不合理的',
                '不支持校園設圍牆是不對的','反對校園設圍牆是不對的','不贊成校園設圍牆是不對的','不同意校園設圍牆是不對的'],
            '另立專法保障同婚是正確的':['不支持另立專法保障同婚','不同意另立專法保障同婚','反對另立專法保障同婚','不贊成另立專法保障同婚','不應該另立專法保障同婚',
                '另立專法保障同婚是不應該的','另立專法保障同婚是不合理的','另立專法保障同婚是不對的','拒絕另立專法保障同婚',
                '不支持允許另立專法保障同婚','不同意允許另立專法保障同婚','不贊成允許另立專法保障同婚','不應該允許另立專法保障同婚',
                '允許另立專法保障同婚是不應該的','允許另立專法保障同婚是不對的','允許另立專法保障同婚是不合理的','允許另立專法保障同婚是不正確的','允許另立專法保障同婚是錯誤的',
                '支持取消專法保障同婚','同意取消專法保障同婚','贊成取消專法保障同婚','應該取消專法保障同婚',
                '取消專法保障同婚是應該的','取消專法保障同婚是合理的','取消專法保障同婚是可被接受的','取消專法保障同婚是可被支持的','取消專法保障同婚是正確的',
                '支持拒絕專法保障同婚','同意拒絕專法保障同婚','贊成拒絕專法保障同婚','拒絕專法保障同婚是應該的','拒絕專法保障同婚是合理的','拒絕專法保障同婚是可被接受的','拒絕專法保障同婚是可被支持的','拒絕專法保障同婚是正確的',
                ],
            '堅決反對政府舉債發展前瞻建設計畫':['支持政府舉債發展前瞻建設計畫','同意政府舉債發展前瞻建設計畫','贊成政府舉債發展前瞻建設計畫','政府應該舉債發展前瞻建設計畫',
                '政府舉債發展前瞻建設計畫是合理的','政府舉債發展前瞻建設計畫是可被接受的','政府舉債發展前瞻建設計畫是可被支持的','政府舉債發展前瞻建設計畫是正確的',
                '不支持政府舉債發展前瞻建設計畫是不應該的','不同意政府舉債發展前瞻建設計畫是不應該的','不贊成政府舉債發展前瞻建設計畫是不應該的','不允許政府舉債發展前瞻建設計畫是不應該的',
                '不支持禁止政府舉債發展前瞻建設計畫','不同意禁止政府舉債發展前瞻建設計畫','不贊成禁止政府舉債發展前瞻建設計畫','不應該禁止政府舉債發展前瞻建設計畫',
                '禁止政府舉債發展前瞻建設計畫是不應該的','禁止政府舉債發展前瞻建設計畫是不合理的','禁止政府舉債發展前瞻建設計畫是不對的',
                '不支持拒絕政府舉債發展前瞻建設計畫','不同意拒絕政府舉債發展前瞻建設計畫','不贊成拒絕政府舉債發展前瞻建設計畫','不應該拒絕政府舉債發展前瞻建設計畫',
                '拒絕政府舉債發展前瞻建設計畫是不應該的','拒絕政府舉債發展前瞻建設計畫是不合理的','拒絕政府舉債發展前瞻建設計畫是不對的'
                ],
            '支持陳前總統保外就醫':['不支持陳前總統保外就醫','反對陳前總統保外就醫','不贊成陳前總統保外就醫','不同意陳前總統保外就醫',
                '不應該讓陳前總統保外就醫','讓陳前總統保外就醫是不應該的','讓陳前總統保外就醫是不合理的','讓陳前總統保外就醫是不對的','讓陳前總統保外就醫是不正確的','讓陳前總統保外就醫是錯誤的',
                '支持禁止陳前總統保外就醫','同意禁止陳前總統保外就醫','贊成禁止陳前總統保外就醫','應該禁止陳前總統保外就醫',
                '禁止陳前總統保外就醫是應該的','禁止陳前總統保外就醫是合理的','禁止陳前總統保外就醫是可被接受的','禁止陳前總統保外就醫是可被支持的','禁止陳前總統保外就醫是正確的','禁止陳前總統保外交易是對的',
                '支持拒絕陳前總統保外就醫','同意拒絕陳前總統保外就醫','贊成拒絕陳前總統保外就醫','應該拒絕陳前總統保外就醫',
                '拒絕陳前總統把未就醫是應該的','拒絕參選總統保外就醫是合理的','拒絕陳前總統保外覺得是可被接受的','拒絕陳前總統保外就醫是可被支持的','拒絕陳前總統保外就醫是正確的','拒絕陳前總統保外就醫是對的',
                '反對允許陳前總統保外就醫','不支持允許陳前總統保外就醫','不贊成允許陳前總統保外就醫','不同意允許陳前總統保外就醫',
                '允許陳前總統保外就醫是不應該的','允許陳前總統保外就醫是不合理的','允許陳前總統保外就醫是不對的','允許陳前總統保外就醫是不正確的','允許陳前總統保外就醫是錯誤的',
                ],
            '年金改革應取消或應調降軍公教月退之優存利率十八趴':['不支持年金改革取消或調降軍公教月退優存利率18%十八趴','反對年金改革取消或調降軍公教月退優存利率18%十八趴','不贊成年金改革取消或調降軍公教月退優存利率18%十八趴','不同意年金改革取消或調降軍公教月退優存利率18%十八趴','年金改革不應該取消或調降軍公教月退優存利率18%十八趴',
                '年金改革取消或調降軍公教月退優存利率18%十八趴是不應該的','年金改革取消或調降軍公教月退優存利率18%十八趴是不合理的','年金改革取消或調降軍公教月退優存利率18%十八趴是不可被接受的','年金改革取消或調降軍公教月退優存利率18%十八趴是不被支持的','年金改革取消或調降軍公教月退優存利率18%十八趴是不正確的','年金改革取消或調降軍公教月退優存利率18%十八趴是錯誤的','年金改革取消或調降軍公教月退優存利率18%十八趴是不對的',
                '支持拒絕年金改革取消或調降軍公教月退優存利率18%十八趴','同意拒絕年金改革取消或調降軍公教月退優存利率18%十八趴','贊成拒絕年金改革取消或調降軍公教月退優存利率18%十八趴','應拒絕年金改革取消或調降軍公教月退優存利率18%十八趴',
                '拒絕年金改革取消或調降軍公教月退優存利率18%十八趴是應該的','拒絕年金改革取消或調降軍公教月退優存利率18%十八趴是合理的','拒絕年金改革取消或調降軍公教月退優存利率18%十八趴是可被接受的','拒絕年金改革取消或調降軍公教月退優存利率18%十八趴是可被支持的','拒絕年金改革取消或調降軍公教月退優存利率18%十八趴是正確的','拒絕年金改革取消或調降軍公教月退優存利率18%十八趴是對的',
                '不支持允許年金改革取消或調降軍公教月退優存利率18%十八趴','不同意年金改革取消或調降軍公教月退優存利率18%十八趴','不贊成年金改革取消或調降軍公教月退優存利率18%十八趴','年金改革不應該取消或調降軍公教月退優存利率18%十八趴',
                '年金改革取消或調降軍公教月退優存利率18%十八趴是合理的','年金改革取消或調降軍公教月退優存利率18%十八趴是可被接受的','年金改革取消或調降軍公教月退優存利率18%十八趴是可被支持的','年金改革取消或調降軍公教月退優存利率18%十八趴是正確的','年金改革取消或調降軍公教月退優存利率18%十八趴是對的'
                ],
            '同意動物實驗':['不支持動物實驗','反對動物實驗','不贊成動物實驗','不同意動物實驗','不應該動物實驗','動物實驗是不應該的','動物實驗是不合理的','動物實驗是不對的','動物實驗是不正確的','動物實驗是錯誤的',
                '贊成禁止動物實驗','支持禁止動物實驗','同意禁止動物實驗','應該禁止動物實驗','禁止動物實驗是應該的','禁止動物實驗是合理的','禁止動物實驗是正確的','禁止動物實驗是對的',
                '支持拒絕動物實驗','同意拒絕動物實驗','贊成拒絕動物實驗','拒絕動物實驗是應該的','應該拒絕動物實驗','拒絕動物實驗是合理的','拒絕動物實驗是正確的','拒絕動物實驗是對的',
                '不支持允許動物實驗','反對允許動物實驗','不贊成允許動物實驗','不同意允許動物實驗','允許動物實驗是不應該的','不應該允許動物實驗','允許動物實驗是不合理的','允許動物實驗是不對的','允許動物實驗是不正確的','允許動物實驗是錯誤的',
                ],
            '油價應該凍漲或緩漲':['支持油價漲價','同意油價漲價','贊成油價漲價','油價應該漲價','油價漲價是應該的','油價漲價是合理的','是可被接受的','油價漲價是被支持的','油價漲價是正確的',
                '不支持油價應該凍漲或緩漲','反對油價應該凍漲或緩漲','不贊成油價應該凍漲或緩漲','不同意油價應該凍漲或緩漲','油價不應該凍漲或緩漲',
                '油價凍漲或緩漲是不應該的','油價凍漲或緩漲是不合理的','油價凍漲或緩漲是不對的','油價凍漲或緩漲是不正確的','油價凍漲或緩漲是錯誤的',
                '支持取消油價凍漲或緩漲','同意取消油價凍漲或緩漲','贊成取消油價凍漲或緩漲','反對取消油價漲價','不贊成取消油價漲價','不同意取消油價漲價','不應該取消油價漲價',
                '取消油價漲價是不合理的','取消油價漲價是不應該的','取消油價漲價是不正確的','取消油價漲價是錯誤的','取消油價漲價是不對的',
                '支持拒絕油價凍漲或緩漲','同意拒絕油價凍漲或緩漲','贊成拒絕油價凍漲或緩漲','反對拒絕油價漲價','不贊成拒絕油價漲價','不同意拒絕油價漲價','不應該拒絕油價漲價',
                '拒絕油價漲價是不合理的','拒絕油價漲價是不應該的','拒絕油價漲價是不正確的','拒絕油價漲價是錯誤的','拒絕油價漲價是不對的',
                '支持禁止油價凍漲或緩漲','同意禁止油價凍漲或緩漲','贊成禁止油價凍漲或緩漲','反對禁止油價漲價','不贊成禁止油價漲價','不同意禁止油價漲價','不應該禁止油價漲價',
                '禁止油價漲價是不合理的','禁止油價漲價是不應該的','禁止油價漲價是不正確的','禁止油價漲價是錯誤的','禁止油價漲價是不對的'
                ],
            '反對旺旺中時併購中嘉':['支持旺旺中時併購中嘉','同意旺旺中時併購中嘉','贊成旺旺中時併購中嘉','旺旺中時應可以併購中嘉',
                '旺旺中時併購中嘉是應該的','旺旺中時併購中嘉是合理的','旺旺中時併購中嘉是可被接受的','旺旺中時併購中嘉是可被支持的','旺旺中時併購中嘉是正確的','旺旺中時併購中嘉是對的',
                '支持允許旺旺中時併購中嘉','同意允許旺旺中時併購中嘉','贊成允許旺旺中時併購中嘉','應該允許旺旺中時併購中嘉','應允許旺旺中時併購中嘉',
                '允許旺旺中時併購中嘉是應該的','允許旺旺中時併購中嘉是可被接受的','允許旺旺中時併購中嘉是可被支持的','允許旺旺中時併購中嘉是正確的','允許旺旺中時併購中嘉是對的',
                '不支持禁止旺旺中時併購中嘉','反對禁止旺旺中時併購中嘉','不贊成禁止旺旺中時併購中嘉','不同意禁止旺旺中時併購中嘉','不應該禁止旺旺中時併購中嘉',
                '禁止旺旺中時併購中嘉是不應該的','禁止旺旺中時併購中嘉是不合理的','禁止旺旺中時併購中嘉是不對的','禁止旺旺中時併購中嘉是不正確的','禁止旺旺中時併購中嘉是錯誤的',
                '不支持拒絕旺旺中時併購中嘉','反對拒絕旺旺中時併購中嘉','不贊成拒絕旺旺中時併購中嘉','不同意拒絕旺旺中時併購中嘉','不應該拒絕旺旺中時併購中嘉',
                '拒絕旺旺中時併購中嘉是不應該的','拒絕旺旺中時併購中嘉是不合理的','拒絕旺旺中時併購中嘉是不對的','拒絕旺旺中時併購中嘉是不正確的','拒絕旺旺中時併購中嘉是錯誤的',
                ],
            '贊同課綱微調':['不支持課綱微調','反對課綱微調','不贊成課綱微調','不同意課綱微調','課綱不應該微調',
                '課綱微調是不應該的','課綱微調是不合理的','課綱微調是不對的','課綱微調是不正確的','課綱微調是錯誤的',
                '不支持允許課綱微調','反對允許課綱微調','不贊成允許課綱微調','不同意允許課綱微調','課綱不應該微調',
                '允許課綱微調是不應該的','允許課綱微調是不合理的','允許課綱微調是不對的','允許課綱微調是不正確的','允許課綱微調是錯誤的',
                '支持取消課綱微調','同意取消課綱微調','贊成取消課綱微調','應該取消課綱微調',
                '取消課綱微調是應該的','取消課綱微調是合理的','取消課綱微調可被接受的','取消課綱微調可被支持的','取消課綱微調是正確的','取消課綱微調是對的',
                '支持拒絕課綱微調','同意拒絕課綱微調','贊成拒絕課綱微調','應該拒絕課綱微調',
                '拒絕課綱微調是應該的','拒絕課綱微調是合理的','拒絕課綱微調可被接受的','拒絕課綱微調可被支持的','拒絕課綱微調是正確的','拒絕課綱微調是對的',
                '支持禁止課綱微調','同意禁止課綱微調','贊成禁止課綱微調','應該禁止課綱微調',
                '禁止課綱微調是應該的','禁止課綱微調是合理的','禁止課綱微調可被接受的','禁止課綱微調可被支持的','禁止課綱微調是正確的','禁止課綱微調是對的'
                ],
            '贊成流浪動物零撲殺':['不支持流浪動物零撲殺','反對流浪動物零撲殺','不贊成流浪動物零撲殺','不同意流浪動物零撲殺','不應該流浪動物零撲殺',
                '流浪動物零撲殺是不應該的','流浪動物零撲殺是不合理的','流浪動物零撲殺是不對的',
                '支持撲殺流浪動物','同意撲殺流浪動物','贊成撲殺流浪動物','應該撲殺流浪動物',
                '撲殺流浪動物是應該的','撲殺流浪動物是合理的','撲殺流浪動物是可被接受的','撲殺流浪動物是可被支持的','撲殺流浪動物是正確的','撲殺流浪動物是對的',
                '支持允許撲殺流浪動物','同意允許撲殺流浪動物','贊成允許撲殺流浪動物','應該允許撲殺流浪動物',
                '允許撲殺流浪動物是應該的','允許撲殺流浪動物是合理的','允許撲殺流浪動物是可被接受的','允許撲殺流浪動物是可被支持的','允許撲殺流浪動物是正確的','允許撲殺流浪動物是對的',
                '不支持拒絕撲殺流浪動物','反對拒絕撲殺流浪動物','不贊成拒絕撲殺流浪動物','不同意拒絕撲殺流浪動物','不應該拒絕撲殺流浪動物',
                '拒絕撲殺流浪動物是不應該的','拒絕撲殺流浪動物是不合理的','拒絕撲殺流浪動物是不對的','拒絕撲殺流浪動物是不正確的','拒絕撲殺流浪動物是錯誤的',
                '不支持取消撲殺流浪動物','反對取消撲殺流浪動物','不贊成取消撲殺流浪動物','不同意取消撲殺流浪動物','不應該取消撲殺流浪動物',
                '取消撲殺流浪動物是不應該的','取消撲殺流浪動物是不合理的','取消撲殺流浪動物是不對的','取消撲殺流浪動物是不正確的','取消撲殺流浪動物是錯誤的',
                '不支持禁止撲殺流浪動物','反對禁止撲殺流浪動物','不贊成禁止撲殺流浪動物','不同意禁止撲殺流浪動物','不應該禁止撲殺流浪動物',
                '禁止撲殺流浪動物是不應該的','禁止撲殺流浪動物是不合理的','禁止撲殺流浪動物是不對的','禁止撲殺流浪動物是不正確的','禁止撲殺流浪動物是錯誤的',
                '支持拒絕流浪動物零撲殺','同意拒絕流浪動物零撲殺','贊成拒絕流浪動物零撲殺','應該拒絕流浪動物零撲殺',
                '拒絕流浪動物零撲殺是應該的','拒絕流浪動物零撲殺是合理的','拒絕流浪動物零撲殺是對的','拒絕流浪動物零撲殺是正確的',
                '支持禁止流浪動物零撲殺','同意禁止流浪動物零撲殺','贊成禁止流浪動物零撲殺','不拒絕禁止流浪動物零撲殺','應該禁止流浪動物零撲殺',
                '禁止流浪動物零撲殺是應該的','禁止流浪動物零撲殺是合理的','禁止流浪動物零撲殺是對的','禁止流浪動物零撲殺是正確的',
                '支持取消流浪動物零撲殺','同意取消流浪動物零撲殺','贊成取消流浪動物零撲殺','不拒絕取消流浪動物零撲殺','應該取消流浪動物零撲殺',
                '取消流浪動物零撲殺是應該的','取消流浪動物零撲殺是合理的','取消流浪動物零撲殺是對的','取消流浪動物零撲殺是正確的'
                ],
            '核四應該啟用':['不支持核四啟用','反對核四啟用','不贊成核四啟用','不同意核四啟用','不支持核四應該啟用','反對核四應該啟用','不贊成核四應該啟用','不同意核四應該啟用',
                '核四啟用是不應該的','核四啟用是不合理的','核四啟用是不對的','核四啟用是不正確的','核四啟用是錯誤的',
                '支持停止核四啟用','不拒絕停止核四啟用','同意停止核四啟用','贊成停止核四啟用','應該停止核四啟用',
                '停止核四啟用是應該的','停止核四啟用是合理的','停止核四啟用是可被接受的','停止核四啟用是可被支持的','停止核四啟用是正確的','停止核四啟用是對的',
                '支持取消核四啟用','不取消取消核四啟用','同意取消核四啟用','贊成取消核四啟用','應該取消核四啟用',
                '取消核四啟用是應該的','取消核四啟用是合理的','取消核四啟用是可被接受的','取消核四啟用是可被支持的','取消核四啟用是正確的','取消核四啟用是對的',
                '支持禁止核四啟用','不拒絕禁止核四啟用','同意禁止核四啟用','贊成禁止核四啟用','應該禁止核四啟用',
                '禁止核四啟用是應該的','禁止核四啟用是合理的','禁止核四啟用是可被接受的','禁止核四啟用是可被支持的','禁止核四啟用是正確的','禁止核四啟用是對的',
                '支持拒絕核四啟用','不拒絕拒絕核四啟用','同意拒絕核四啟用','贊成拒絕核四啟用','應該拒絕核四啟用',
                '拒絕核四啟用是應該的','拒絕核四啟用是合理的','拒絕核四啟用是可被接受的','拒絕核四啟用是可被支持的','拒絕核四啟用是正確的','拒絕核四啟用是對的',
                '支持停用核四','不拒絕停用核四','同意停用核四','贊成停用核四','應該停用核四','停用核四是應該的','停用核四是合理的',
                '停用核四是可被接受的','停用核四是可被支持的','停用核四是正確的','停用核四是對的'
                ],

        })
        self.settings = settings
        self.ckiptokenizer = BertTokenizerFast.from_pretrained('bert-base-chinese')
        #maxLenLimitAllowedInaSentence = 200

    def getCKIPTokens(self, inputStr, srctype='Query'):
        argInTokenize = self.settings['tokenizerSettingsDoc'] if srctype=='Doc' else self.settings['tokenizerSettingsQuery']
        tokens = self.ckiptokenizer(inputStr, **argInTokenize)
        return tokens

    def readsrc(self, **kwargs):
        kwargs.setdefault('candidate_negative_sampling_rate', 1.0) #數字越大利用擴增而來的負例越多
        """
        td: Index(['Query', 'News_Index', 'Relevance'], dtype='object')
        qs: Index(['Query_Index', 'Query'], dtype='object')
        nc: Index(['News_Index', 'News_URL'], dtype='object')
        newdf: Index(['News_URL', 'News_Fulltitle', 'News_Fullcontent'], dtype='object')
        """
        
        td = pd.read_csv(os.path.join(self.settings['workingdir'],'TD.csv'))
        qs = pd.read_csv(os.path.join(self.settings['workingdir'], 'QS_1.csv')).append(pd.read_csv(os.path.join(self.settings['workingdir'], 'QS_2.csv'))).reset_index(drop=True)
        qs = pd.merge(left=td.loc[:,["Query"]].drop_duplicates(), right=qs, how='outer', on='Query').drop_duplicates(subset=['Query']).reset_index(drop=True)
        nc = pd.read_csv(os.path.join(self.settings['workingdir'],'NC_1.csv')).append(pd.read_csv(os.path.join(self.settings['workingdir'],'NC_2.csv'))).drop_duplicates(subset=['News_Index']).reset_index(drop=True)
        newsdf = pd.merge(
            left=pd.read_json(os.path.join(self.settings['workingdir'],'url_to_title.json'), orient="index").reset_index().rename(columns={"index": "News_URL", 0: "News_Fulltitle"}),
            right=pd.read_json(os.path.join(self.settings['workingdir'],'url2content.json'), orient="index").reset_index().rename(columns={"index": "News_URL", 0: "News_Fullcontent"}),
            how='left', on='News_URL').reset_index(drop=True).append(
                pd.read_csv(
                    os.path.join(self.settings['workingdir'],'newsdf3.csv')
                ).loc[:,["News_URL","News_Fulltitle","News_Fullcontent"]]
            ).reset_index(drop=True)
        newsdf = newsdf[~pd.isnull(newsdf.News_Fullcontent)]
        #newsdf['News_Fullcontent'] = multiprocessing_functions.df_apply_by_daskmultiprocessing(newsdf['News_Fullcontent'], lambda x: re.sub(r' +',' ',x).replace('&#39;','\'').replace('audiojs.events.ready(function(){var as = audiojs.createAll();});',''), threading=True, computeoutput=True, workers=self.settings['num_workers']*10)
        #newsdf['News_FullTitleContent'] = multiprocessing_functions.df_apply_by_daskmultiprocessing(newsdf, lambda x: x['News_Fulltitle']+'。'+x['News_Fullcontent'], threading=True, computeoutput=True, workers=self.settings['num_workers']*10)
        newsdf['News_Fullcontent'] = newsdf['News_Fullcontent'].apply( func=lambda x: re.sub(r' +',' ',x).replace('&#39;','\''))
        newsdf['News_FullTitleContent'] = newsdf.apply( func=lambda x: x['News_Fulltitle']+'。'+x['News_Fullcontent'], axis=1)
        newsdf = newsdf[~news_retrieval_common_funcs.is_nan(newsdf.News_FullTitleContent)]
        for col in newsdf.columns:
            newsdf = newsdf.drop_duplicates(subset=[col])
        #newsdf['sentencebreakNews_FullTitleContent'] = multiprocessing_functions.df_apply_by_daskmultiprocessing(newsdf['News_FullTitleContent'], news_retrieval_common_funcs.sentencebreaker, meta=('sentencebreakNews_FullTitleContent', object), threading=True, computeoutput=True, workers=self.settings['num_workers']*10)

        #newsdf['sentencebreakNews_FullTitleContent'] = multiprocessing_functions.df_apply_by_daskmultiprocessing(newsdf['sentencebreakNews_FullTitleContent'], lambda x: [s for s in x if s not in ['()','（）','《》']], threading=True, computeoutput=True, workers=self.settings['num_workers']*10)
        #刪除超長的句子 為了節省記憶體空間將新聞文章去除超長句子
        #newsdf['sentencebreak_FullTitleContent_maxlen'] = multiprocessing_functions.df_apply_by_daskmultiprocessing(newsdf['sentencebreakNews_FullTitleContent'], lambda x: [s for s in x if len(s)<=maxLenLimitOf_aSentence], threading=True, computeoutput=True, workers=self.settings['num_workers'])
        #newsdf['sentencebreakNews_FullTitleContent'] = multiprocessing_functions.df_apply_by_daskmultiprocessing(newsdf['sentencebreakNews_FullTitleContent'], lambda x: [s for s in x if (re.match('^\d+$', s)==None) and (s not in ['()','（）','《》']) and (len(s)<=maxLenLimitAllowedInaSentence)], threading=True, computeoutput=True, workers=self.settings['num_workers']*10)

        newsdf['News_FullTitleContent_fullStrlen'] = newsdf['News_FullTitleContent'].apply(len)
        #newsdf['sentencebreak_FullTitleContent_N_of_sentences'] = multiprocessing_functions.df_apply_by_daskmultiprocessing(newsdf['sentencebreakNews_FullTitleContent'], lambda x: len(x), threading=True, computeoutput=True, workers=self.settings['num_workers']*10)
        #newsdf['sentencebreak_FullTitleContent_maxlen'] = multiprocessing_functions.df_apply_by_daskmultiprocessing(newsdf['sentencebreakNews_FullTitleContent'], lambda x: max([len(s) for s in x]), threading=True, computeoutput=True, workers=self.settings['num_workers']*10)
        #newsdf = newsdf[~pd.isnull(newsdf.sentencebreakNews_FullTitleContent)]
        nc = nc[~pd.isnull(nc.News_Index)]
        #maxlengthNews = newsdf.sort_values(by=['full_strlen'], ascending=False).iloc[0,:]['News_FullTitleContent']
        
        compset = pd.merge(left=td, right=qs, how='outer', on='Query')
        compset = pd.merge(left=compset, right=nc, how='outer', on='News_Index')
        compset = pd.merge(left=compset, right=newsdf.loc[:,['News_URL']], how='inner', on='News_URL')
        compset = compset[~pd.isnull(compset.Relevance) & ~pd.isnull(compset.Query)]
        trainingNewsdf = newsdf[newsdf.News_URL.isin(compset.News_URL)]# | newsdf.index.isin(newsdf.sample(n=int(compset.shape[0]*kwargs['candidate_negative_sampling_rate']), replace=False, random_state=self.settings['random_state'] ).index  )
        trainingNewsdf = trainingNewsdf.reset_index(drop=True)
        #compset = compset[~news_retrieval_common_funcs.is_nan(compset.News_FullTitleContent)]
        #compset['News_QueryTitleContent'] = multiprocessing_functions.df_apply_by_daskmultiprocessing(compset, lambda x: x['Query']+self.ckiptokenizer.sep_token+x['News_FullTitleContent']+self.ckiptokenizer.sep_token, meta=('News_QueryTitleContent',object), threading=True, computeoutput=True)
        compset = compset.reset_index(drop=True)
        """
        compset: 	Query	News_Index	Relevance	Query_Index	News_URL
        """
        
        query_Ant_Syn_onym = {}
        for settingkey in ['queryAntonyms', 'querySynonyms']:
            query_Ant_Syn_onym[settingkey] = [pd.DataFrame(value, columns=['query_Ant_Syn_onyms']).assign(Query=lambda x:key, onymType=lambda x:settingkey) for key,value in self.settings[settingkey].items()]
            query_Ant_Syn_onym[settingkey] = pd.concat(query_Ant_Syn_onym[settingkey], axis=0)
        query_Ant_Syn_onym = pd.concat(query_Ant_Syn_onym.values(), axis=0).reset_index(drop=True)
        """
        用同義字替換增加正例, 用反義字替換增加負例讓模型學會判斷立場
        """
        candidateOnymsSampling_df = compset.merge(query_Ant_Syn_onym, how='inner', on='Query')
        candidateOnymsSampling_df.loc[((candidateOnymsSampling_df['onymType']=='queryAntonyms') & (candidateOnymsSampling_df['Relevance']>=1.0)), 'Relevance'] = 0.0
        candidateOnymsSampling_df.loc[((candidateOnymsSampling_df['onymType']=='queryAntonyms') & (candidateOnymsSampling_df['Relevance']<1.0)), 'Relevance'] = 2.0
        candidateOnymsSampling_df = candidateOnymsSampling_df.drop(columns=['Query','onymType']).rename(columns={'query_Ant_Syn_onyms':'Query'})
        compset = pd.concat([compset, candidateOnymsSampling_df], axis=0).reset_index(drop=True)

        def calcGroupSampleN(group, times=kwargs['candidate_negative_sampling_rate']):
            relevanceAllNRows = group.shape[0]
            max = group['countsRelevance'].max()
            noRelevanceRows = group[group['Relevance']<1.0].shape[0]
            countsOnNoRelevance = group[group['Relevance']<1.0]['countsRelevance'].iloc[0] if noRelevanceRows>0 else 0
            if relevanceAllNRows<2:
                sampleN = max
            else:
                secondmax = group['countsRelevance'].iloc[1]
                max_M_secondmax = max-secondmax
                max_M_countsOnNoRelevance = max-countsOnNoRelevance
                #檢查無關聯的資料個數是不是最多的，如果是最多的會是0，此時要用max_M_secondmax
                sampleN = max_M_secondmax if max_M_countsOnNoRelevance==0 else max_M_countsOnNoRelevance
            return int(sampleN*times)

        #算出每個查詢各自要補多少資料
        compset_label_distributions = compset.value_counts(subset=['Query','Relevance']).reset_index().rename(columns={0:'countsRelevance'}).sort_values(['Query', 'countsRelevance'], ascending=False)
        compset_label_distributions = compset_label_distributions.groupby('Query').apply(calcGroupSampleN).reset_index().rename(columns={0:'finalSampleN'})

        def queryToCandidate_negative_sampling_df_1st(query): #, srcCompset=compset, srcqs=qs
            #查詢別的關鍵字的正相關結果
            corresponding_query_Ant_Syn_onym = query_Ant_Syn_onym[query_Ant_Syn_onym['Query']==query]['query_Ant_Syn_onyms']
            candidate_negative_sampling_df = compset[~(compset['Query'].isin(corresponding_query_Ant_Syn_onym) | (compset['Query']==query))]
            candidate_negative_sampling_df = candidate_negative_sampling_df[candidate_negative_sampling_df['Relevance']>=1.0]
            candidate_negative_sampling_df = candidate_negative_sampling_df.drop(columns=qs.columns.tolist())

            #查詢要補多少負例資料然後抽樣補上
            candidate_negative_sampling_df_maxsampleN = compset_label_distributions[compset_label_distributions['Query']==query]['finalSampleN'].iloc[0]
            candidate_negative_sampling_df = candidate_negative_sampling_df.sample(n=candidate_negative_sampling_df_maxsampleN, replace=False, random_state=self.settings['random_state'])

            candidate_negative_sampling_df = candidate_negative_sampling_df.assign(testjoincol='test').merge(
                qs[qs['Query']==query].assign(testjoincol='test'),
                how='left',
                on='testjoincol'
            ).drop(columns=['testjoincol'])#.assign(Relevance=lambda x: 0.0, Query=lambda x: query)
            candidate_negative_sampling_df.loc[:,'Relevance'] = 0.0
            candidate_negative_sampling_df.loc[:,'Query'] = query

            return candidate_negative_sampling_df


        if kwargs['candidate_negative_sampling_rate']>0: #限制負例個數
            """
            增加負例訓練資料：negative sampling
            利用查詢別的關鍵字的正相關結果 換為 不相關的結果 擴增
            """
            compset_complements = []

            arg_query_for_compset_complements = compset['Query'].drop_duplicates().reset_index(drop=True)
            compset_complements = dask.bag.from_sequence(arg_query_for_compset_complements, npartitions=self.settings['num_workers']).map(queryToCandidate_negative_sampling_df_1st)
            #compset_complements.visualize(filename='transpose.svg')
            compset_complements = compset_complements.compute(scheduler='threads', num_workers=self.settings['num_workers']*10)
            #display(compset_complements, type(compset_complements))
            #sys.exit()
            #pd_display_maxrows = pd.get_option('display.max_rows', None)
            #pd.set_option('display.max_rows', 9999)
            compset_complements = list(compset_complements)
            compset_complements.insert(0, compset)
            compset_complements = pd.concat(compset_complements, axis=0)
            compset_complements = compset_complements[~(compset_complements['Query'].isnull() | compset_complements['Query'].apply(news_retrieval_common_funcs.is_nan)  )]
            compset = compset_complements.reset_index(drop=True)

        train_class_weights = class_weight.compute_class_weight(
            class_weight='balanced',
            classes=compset['Relevance'].unique(),
            y=compset['Relevance']
        )
        train_class_weights = dict(zip(compset['Relevance'].unique(),train_class_weights))
        #print('train_class_weights is {}'.format(train_class_weights))
        train_sample_weights = class_weight.compute_sample_weight(
                class_weight=train_class_weights,
                y=compset['Relevance']
        )
        compset['sampleweight'] = train_sample_weights

        """
        為了節省轉換為token的運算，先取唯一值的轉換，接著取indexdf批次在indexdf中找到對應的row轉換
        """
        compset_X = {}
        checkTokensDF = {}
        #queries_index_df = news_retrieval_common_funcs.strs_to_a_indexed_df(compset['Query'].unique().tolist()) 
        #docs_index_df = news_retrieval_common_funcs.strs_to_a_indexed_df(compset['News_FullTitleContent'].unique().tolist())
        checkTokensDF['Query'] = compset.loc[:,['Query']].drop_duplicates().reset_index(drop=True).reset_index().set_index('Query')
        checkTokensDF['Doc'] = trainingNewsdf.loc[:,['News_URL','News_FullTitleContent']].drop_duplicates().reset_index(drop=True).reset_index().set_index('News_URL')
        UniquedTokens = {}
        UniquedTokens['Query'] = self.ckiptokenizer(checkTokensDF['Query'].index.tolist(), **self.settings['tokenizerSettingsQuery'])
        UniquedTokens['Doc'] = self.ckiptokenizer(checkTokensDF['Doc']['News_FullTitleContent'].tolist(), **self.settings['tokenizerSettingsDoc'])
        compset['positionInQueryUniquedTokens'] = checkTokensDF['Query'].loc[compset['Query']].reset_index(drop=True)
        compset['positionInDocUniquedTokens'] = checkTokensDF['Doc']['index'].loc[compset['News_URL']].reset_index(drop=True)
        """
        compset_X['Query'] = self.ckiptokenizer(checkTokensDF['Query'].index.tolist(), **self.settings['tokenizerSettingsQuery'])
        compset_X['Doc'] = self.ckiptokenizer(checkTokensDF['Doc']['News_FullTitleContent'].tolist(), **self.settings['tokenizerSettingsDoc'])
        for pkey in ['Query','Doc']:
            #先在token中查詢對應的位子key然後再結合查詢編碼後的token是什麼最後合併
            searchSrc = 'Query' if pkey=='Query' else 'News_URL'
            need_extract_indices = checkTokensDF[pkey].loc[compset[searchSrc]]['index'].to_numpy()
            compset_X[pkey] = {tokentype:
                    compset_X[pkey][tokentype][
                        need_extract_indices
                    ]
                for tokentype in compset_X[pkey].keys()
            }
            for tokentype,tokentypeV in compset_X[pkey].items():
                display('tokentype {} shape is {}'.format(tokentype, tokentypeV.shape))
        """
        
        """
            舊作法
            compset_X_QueryUniquedTokens = self.ckiptokenizer(compset['Query'].unique().tolist(), **self.settings['tokenizerSettingsQuery'])
            compset_X_DocUniquedTokens = self.ckiptokenizer(newsdf['News_FullTitleContent'].unique().tolist(), **self.settings['tokenizerSettingsDoc'])
            compset_X['Query'] = {tokentype: #先在token中查詢對應的位子key然後再結合查詢編碼後的token是什麼最後合併
                    compset_X_QueryUniquedTokens[tokentype][
                        queries_index_df.loc[compset['Query']]['index']
                    ]
                for tokentype in compset_X_QueryUniquedTokens.keys()
            }
            compset_X['Doc'] = {tokentype:
                    compset_X_DocUniquedTokens[tokentype][
                        docs_index_df.loc[compset['News_FullTitleContent']]['index']
                    ]
                for tokentype in compset_X_DocUniquedTokens.keys()
            }        
        """
        compset_Y = condor.CondorOrdinalEncoder(nclasses=compset['Relevance'].unique().shape[0]).fit_transform(compset['Relevance']) #pd.get_dummies(compset['Relevance']).to_numpy()
        X_train = {}
        X_val = {}
        X_all = {}
        X_train_i, X_val_i, sampleweight_train, sampleweight_val, Y_train, Y_val = train_test_split(compset.index.values, compset['sampleweight'].to_numpy() , compset_Y, test_size=self.settings['test_size'], random_state=self.settings['random_state'], shuffle=True, stratify=compset_Y)
        """
        for contenttype in compset_X.keys(): # query or doc
            for k in compset_X[contenttype].keys(): #tokenid, attention_mask or tokentype
                X_all[contenttype+'_'+k] = compset_X[contenttype][k]
                X_train[contenttype+'_'+k] = compset_X[contenttype][k][X_train_i]
                X_val[contenttype+'_'+k] = compset_X[contenttype][k][X_val_i]
        """
        
        return {
            'checkTokensDF': checkTokensDF,
            'compset': compset,
            #'compset_X': compset_X,
            'compset_Y': compset_Y,
            #'compset_X_QueryUniquedTokens': compset_X_QueryUniquedTokens,
            #'compset_X_DocUniquedTokens': compset_X_DocUniquedTokens,
            'newsdf': newsdf,
            'sampleweight_train': sampleweight_train,
            'sampleweight_val': sampleweight_val,
            'UniquedTokens': UniquedTokens,
            'X_train': compset.iloc[X_train_i].filter(like='positionIn', axis=1),
            'X_val': compset.iloc[X_val_i].filter(like='positionIn', axis=1),
            #'X_all': X_all,
            'Y_train': Y_train,
            'Y_val': Y_val
        }

    def iterate_dataset(self, src_X_all, UniquedTokens, src_y_all, sweights, bsize=None, returncallable=False, returntensor=True, returnspec=False):
        bsize = self.settings['batch_size'] if bsize is None else bsize
        if returnspec==True:
            spec = {
                contenttype+'_'+key:tf.TensorSpec(
                    (bsize,value.shape[1]), dtype=value.dtype.name, name=contenttype+'_'+key
                )
                for contenttype in ['Query','Doc']
                for key,value in UniquedTokens[contenttype].items()
            }
            spec = (spec, tf.TensorSpec(
                (bsize, src_y_all.shape[1]), dtype=src_y_all.dtype.name, name='src_y_all'
            ),)
            if sweights is not None and sweights[0] is not None:
                spec = spec + (tf.TensorSpec(
                    (bsize,), dtype=sweights.dtype.name, name='sweights'
                ),)
            return spec
        def the_generator():
            i = 0
            while True:
                rollbeginpos = i*bsize
                stackedResultX = {
                    contenttype+'_'+key:value[
                        np.roll(src_X_all['positionIn'+contenttype+'UniquedTokens'].to_numpy(), bsize, axis=0)[0:bsize]
                    ]
                    for contenttype in ['Query','Doc']
                    for key,value in UniquedTokens[contenttype].items()
                }
                if returntensor:
                    #stackedResultX = {k:tf.convert_to_tensor(v) for k,v in stackedResultX.items()}
                    stackedResultX = dict(zip(
                        stackedResultX.keys(),
                        dask.bag.from_sequence(stackedResultX.values(), npartitions=self.settings['num_workers']).map(tf.convert_to_tensor).compute(scheduler='threads', num_workers=self.settings['num_workers']*10)
                        ))
                #stackedResultX = {key:np.roll(value[i:bsize+i,:], rollbeginpos, axis=0)[0:bsize] for key,value in src_X_all.items()}
                label = np.roll(src_y_all, rollbeginpos, axis=0)[0:bsize]

                if sweights is not None and sweights[0] is not None:
                    toyield = [ stackedResultX, label, np.roll(sweights, rollbeginpos, axis=0)[0:bsize] ]
                else:
                    toyield = [stackedResultX, label]
                if returntensor:
                    toyield = [tf.convert_to_tensor(v) if k>0 else v for k,v in enumerate(toyield)]
                yield tuple(toyield)
                i = i+1
                
        return the_generator if returncallable else the_generator()

    def extractEmbedding(self, model, modelInputs, returnType='np', prefix='Doc_'):
        """
        
        Returns: dict('normalized': embeddings, 'notnormalized': embeddings)
        """
        #instanceGetdata = getdata.getdata()
        #needData = instanceGetdata.readsrc()
        #instanceConstructmodel = constructmodel.constructmodel()
        #models = instanceConstructmodel.generateTwoTowerModels()
        adjustedModelInput = {}
        for key in list(modelInputs.keys()):
            value = tf.convert_to_tensor(modelInputs[key]) if not tf.is_tensor(modelInputs[key]) else modelInputs[key]
            if key.find(prefix)==-1:
                adjkey = '{}{}'.format(prefix, key)
                modelInputs[adjkey] = value
                modelInputs.pop(key,None)
            else:
                modelInputs[key] = value
        modelInputs = dict(modelInputs) #from class 'transformers.tokenization_utils_base.BatchEncoding' to dict
        docEmbeddings = model.predict(x=modelInputs, batch_size=self.settings['batch_size'] )
        docEmbeddings = {'normalized':tf.math.l2_normalize(docEmbeddings), 'notnormalized':docEmbeddings}
        if returnType=='np':
            docEmbeddings = {key:value.numpy() if not isinstance(value, (np.ndarray, np.generic) ) else value for key,value in docEmbeddings.items()}#.astype('float16')
        return docEmbeddings

    def logitsToProbAndLabel(self, logits, pairedDF=None):
        """
        
        Returns: dict(
            logits:logits
            prob:probability that belongs to each category
            label:classied into which label:
            comparedf:show the overall raking result
        )
        """
        predLabelEvaluateRelevanceResult = {}
        predLabelEvaluateRelevanceResult['logits'] = logits
        predLabelEvaluateRelevanceResult['prob'] = condor.ordinal_softmax(logits).numpy()
        predLabelEvaluateRelevanceResult['label'] = tf.math.argmax(predLabelEvaluateRelevanceResult['prob'], axis=1).numpy().astype(int)
        if isinstance(pairedDF, pd.DataFrame):
            predLabelEvaluateRelevanceResult['comparedf'] = pd.concat([
                pairedDF.reset_index(drop=True),
                pd.DataFrame(predLabelEvaluateRelevanceResult['prob'], columns=['prob{}'.format(i) for i in range(predLabelEvaluateRelevanceResult['prob'].shape[1])]),
                pd.Series(predLabelEvaluateRelevanceResult['label'], name='PredLabel').reset_index(drop=True),
                ], axis=1)
        return predLabelEvaluateRelevanceResult


if __name__ == '__main__':
    from IPython.display import display, HTML
    test = getdata()
    testdata = test.read_src()
    display(testdata.keys())
    display(testdata['X_train'])